import (
	"std.um"

	"chunk.um"
	"value.um"
	"object.um"
	"common.um"
	"debug.um"
	"compiler.um"
)

type InterpretResult* = enum {
	Ok
	CompileError
	RuntimeError
}

const FRAMES_MAX* = 64
const STACK_MAX* = FRAMES_MAX * common::UINT8_COUNT

// TODO: encode some other way
type CallFrame = struct {
	closure: ^object::Closure
	ip: uint
	slots: uint
}

type VM = struct {
	frames: [FRAMES_MAX]CallFrame
	frameCount: uint

	ip: uint
	stack: [STACK_MAX]value::Value
	stackTop: uint
	globals: map[str]value::Value
	openUpvalues: ^object::Upvalue
}

var vm: VM

fn clock(args: uint, stack: []value::Value, base: uint): value::Value {
	return value::Number(std::clock())
}

fn resetStack() {
	vm.stackTop = 0
	vm.frameCount = 0
	vm.openUpvalues = null
}

fn runtimeError(msg: str): InterpretResult {
	fprintf(std::stderr(), "%s\n", msg)

	for i := int(vm.frameCount - 1); i >= 0; i-- {
		frame := &vm.frames[i]
		function := frame.closure.function
		instruction := frame.ip - 1
		fprintf(std::stderr(), "[line %d] in ",
			function.chunk.lines[instruction])
		if function.name == "" {
			fprintf(std::stderr(), "script\n")
		} else {
			fprintf(std::stderr(), "%s()\n", function.name)
		}
	}

	resetStack()
	return .RuntimeError
}

fn push(v: value::Value) {
	vm.stack[vm.stackTop] = v
	vm.stackTop++
}

fn pop(): value::Value {
	vm.stackTop--
	return vm.stack[vm.stackTop]
}

fn peek(distance: int): ^value::Value {
	return &vm.stack[vm.stackTop-1 - distance]
}

fn call(closure: ^object::Closure, argCount: uint): bool {
	if argCount != closure.function.arity {
		runtimeError(sprintf("Expected %d arguments but got %d.",
			closure.function.arity, argCount))
		return false
	}

	if vm.frameCount == FRAMES_MAX {
		runtimeError("Stack overflow.")
		return false
	}

	frame := &vm.frames[vm.frameCount]
	vm.frameCount++
	frame.closure = closure
	frame.ip = 0
	frame.slots = vm.stackTop - argCount - 1
	return true
}

fn callValue(callee: value::Value, argCount: uint): bool {
	if f := ^object::Closure(callee); f != null {
		return call(f, argCount)
	}

	if f := ^object::NativeFunction(callee); f != null {
		result := f(argCount, vm.stack, vm.stackTop-argCount)
		vm.stackTop -= argCount + 1
		push(result)
		return true
	}

	runtimeError("Can only call functions and classes.")
	return false
}

fn captureUpvalue(local: uint): ^object::Upvalue {
	prevUpvalue := ^object::Upvalue(null)
	upvalue := vm.openUpvalues
	for upvalue != null && upvalue^.slot > local {
		prevUpvalue = upvalue
		upvalue = upvalue.next
	}

	if upvalue != null && upvalue.slot == local { return upvalue }

	createdUpvalue := object::newUpvalue(vm.stack, local)
	createdUpvalue.next = upvalue

	if prevUpvalue == null {
		vm.openUpvalues = createdUpvalue
	} else {
		prevUpvalue.next = createdUpvalue
	}

	return createdUpvalue
}

fn closeUpvalues(last: uint) {
	for vm.openUpvalues != null && vm.openUpvalues.slot >= last {
		upvalue := vm.openUpvalues
		upvalue.closed = upvalue.location^
		upvalue.location = &upvalue.closed
		vm.openUpvalues = upvalue.next
	}
}

fn init*() {
	resetStack()
	vm.globals = {}
	vm.globals["clock"] = object::NativeFunction(clock)
}

fn unlinkObjects() {
	upvalue := vm.openUpvalues
	for upvalue != null {
		next := upvalue.next
		upvalue.unlink()
		upvalue = next
	}
	vm.openUpvalues = null

	for _, v in vm.stack {
		if u := ^object::Upvalue(v); u != null { u.unlink() }
		if c := ^object::Closure(v); c != null { c.unlink() }
		if f := ^object::Function(v); f != null { f.unlink() }
	}
}

fn free*() {
	unlinkObjects()
}

fn readByte(frame: ^CallFrame): uint8 {
	b := frame.closure.function.chunk.code[frame.ip]
	frame.ip++
	return b
}

fn readOpCode(frame: ^CallFrame): chunk::OpCode {
	return chunk::OpCode(readByte(frame))
}

fn readConstant(frame: ^CallFrame): value::Value {
	// jeez
	return frame.closure.function.chunk.constants[readByte(frame)]
}

fn readShort(frame: ^CallFrame): uint16 {
	frame.ip += 2
	return (frame.closure.function.chunk.code[frame.ip-2] << 8) |
	        frame.closure.function.chunk.code[frame.ip-1]
}

fn binaryOp(op: uint): InterpretResult {
	if lhs, rhs := ^value::Number(peek(0)^), ^value::Number(peek(1)^)
	lhs == null && rhs == null {
		return runtimeError("Operands must be numbers.")
	}

	b := value::Number(pop())
	a := value::Number(pop())
	switch op {
	case 0: push(a - b)
	case 1: push(a * b)
	case 2:
		if b == 0 { return runtimeError("Division by zero.") }
		push(a / b)
	}

	return .Ok
}

fn comparisonOp(op: uint): InterpretResult {
	if lhs, rhs := ^value::Number(peek(0)^), ^value::Number(peek(1)^)
	lhs == null || rhs == null {
		return runtimeError("Operands must be numbers.")
	}

	b := value::Number(pop())
	a := value::Number(pop())
	switch op {
	case 0: push(value::Bool(a <  b))
	case 1: push(value::Bool(a >  b))
	}

	return .Ok
}

fn run(): InterpretResult {
	frame := &vm.frames[vm.frameCount - 1]

	for true {
		if common::DEBUG_TRACE_EXECUTION {
			printf(" ")
			for slot := 0; slot < vm.stackTop; slot++ {
				printf("[ ")
				vm.stack[slot].print()
				printf(" ]")
			}
			printf("\n")

			debug::disassembleInstruction(&frame.closure.function.chunk, frame.ip)
		}

		switch ins := readOpCode(frame); ins {
		case .Constant: push(readConstant(frame))
		case .Nil: push(value::Nil {})
		case .True: push(value::Bool(true))
		case .False: push(value::Bool(false))
		case .Pop: pop()
		case .PopN:
			amt := readByte(frame)
			for i := 0; i < amt; i++ { pop() }

		case .GetGlobal:
			name := value::String(readConstant(frame))
			if !validkey(vm.globals, name) {
				return runtimeError(sprintf("Undefined variable '%s'.", name))
			}
			push(vm.globals[name])

		case .GetLocal:
			offset := readByte(frame)
			push(vm.stack[frame.slots+offset])

		case .DefineGlobal:
			name := value::String(readConstant(frame))
			vm.globals[name] = peek(0)^
			pop()

		case .SetGlobal:
			name := value::String(readConstant(frame))
			if !validkey(vm.globals, name) {
				return runtimeError(sprintf("Undefined variable '%s'.", name))
			}
			vm.globals[name] = peek(0)^

		case .SetLocal:
			offset := readByte(frame)
			vm.stack[frame.slots+offset] = peek(0)^

		case .GetUpvalue:
			slot := readByte(frame)
			push(frame.closure.upvalues[slot].location^)

		case .SetUpvalue:
			slot := readByte(frame)
			// this looks sorta dumb
			frame.closure.upvalues[slot].location^ = peek(0)^

		case .Equal:
			b, a := pop(), pop()
			push(value::Bool(a.equals(&b)))

		case .Greater: comparisonOp(1)
		case .Less: comparisonOp(0)

		case .Add:
			b, a := pop(), pop()

			if lhs, rhs := ^value::String(a), ^value::String(b); lhs != null && rhs != null {
				push(lhs^ + rhs^)
			} else if lhs, rhs := ^value::Number(a), ^value::Number(b); lhs != null && rhs != null {
				push(lhs^ + rhs^)
			} else {
				return runtimeError("Operands must be two numbers or two strings.")
			}

		case .Subtract: if binaryOp(0) != .Ok { return .RuntimeError }
		case .Multiply: if binaryOp(1) != .Ok { return .RuntimeError }
		case .Divide: if binaryOp(2) != .Ok { return .RuntimeError }

		case .Negate:
			if n := ^value::Number(peek(0)^); n == null {
				return runtimeError("Operand must be a number.")
			}

			peek(0)^ = -value::Number(peek(0)^)

		case .Not: push(value::Bool(pop().isFalsey()))

		case .Print:
			pop().print()
			printf("\n")

		case .Jump:
			offset := readShort(frame)
			frame.ip += offset

		case .JumpIfFalse:
			offset := readShort(frame)
			if peek(0).isFalsey() { frame.ip += offset }

		case .Loop:
			offset := readShort(frame)
			frame.ip -= offset

		case .Call:
			argCount := readByte(frame)
			if !callValue(peek(argCount)^, argCount) {
				return .RuntimeError
			}
			frame = &vm.frames[vm.frameCount - 1]

		case .Closure:
			function := ^object::Function(readConstant(frame))
			closure := object::newClosure(function)
			push(closure)
			for i := 0; i < len(closure.upvalues); i++ {
				isLocal := bool(readByte(frame))
				index := readByte(frame)
				if isLocal {
					closure.upvalues[i] = captureUpvalue(frame.slots + index)
				} else {
					closure.upvalues[i] = frame.closure.upvalues[index]
				}
			}

		case .CloseUpvalue:
			closeUpvalues(vm.stackTop - 1)
			pop()

		case .Return:
			result := pop()
			closeUpvalues(frame.slots)
			vm.frameCount--
			if vm.frameCount == 0 {
				pop()
				return .Ok
			}

			vm.stackTop = frame.slots
			push(result)
			frame = &vm.frames[vm.frameCount - 1]

		default: std::assert(false)
		}
	}

	return .RuntimeError // unreachable
}

fn interpret*(source: str): InterpretResult {
	function := compiler::compile(source)
	if function == null { return .CompileError }

	push(function)
	closure := object::newClosure(function)
	pop()
	push(closure)
	call(closure, 0)

	return run()
}
